using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NeuralNetPractice
{
    class NeuralNetwork
    {
        public static List<string> Train(int epochs) => RunCMD_MultiLineOutput("\"networkTrainer.py\"", epochs.ToString());
        public static string Test() => RunCMD_SingleOutput("\"networkTester.py\"", "", false);
        public static string PredictFuture() => RunCMD_SingleOutput("\"networkPredict.py\"", "", false);
        static string RunCMD_SingleOutput(string cmd, string args, bool printOutputToConsole = true)
        {
            var output = "";
            foreach (string line in RunCMD_MultiLineOutput(cmd, args, printOutputToConsole)) 
                output += line;
            return output;
        }
        static List<string> RunCMD_MultiLineOutput(string cmd, string args, bool printOutputToConsole = true)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            //start.FileName = @"C:\Repos\TensorFlowTest\.venv\Scripts\python.exe";
            start.FileName = "python";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = false;
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = false; // Any error in standard output will be redirected back (for example exceptions)
            List<string> output = new List<string>();
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    while (!reader.EndOfStream)
                    {
                        //string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                        //Console.WriteLine(stderr);
                        string result = reader.ReadLine(); // Here is the result of StdOut(for example: print "test")
                        if (printOutputToConsole)
                            Console.WriteLine(result);
                        output.Add(result);
                    }
                }
            }
            return output;
        }
    }
}
